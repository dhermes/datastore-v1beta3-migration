// Copyright 2013 Google Inc. All Rights Reserved.
//
// The datastore v1 service proto definitions

syntax = "proto2";

package api.services.datastore;
option java_package = "com.google.api.services.datastore";


// The result of fetching an entity from the datastore.
message EntityResult {
  // Specifies what data the 'entity' field contains.
  // A ResultType is either implied (for example, in LookupResponse.found it
  // is always FULL) or specified by context (for example, in message
  // QueryResultBatch, field 'entity_result_type' specifies a ResultType
  // for all the values in field 'entity_result').
  enum ResultType {
    FULL = 1;  // The entire entity.
    PROJECTION = 2;  // A projected subset of properties.
                     // The entity may have no key.
                     // A property value may have meaning 18.
    KEY_ONLY = 3;  // Only the key.
  }

  // The resulting entity.
  required Entity entity = 1;
}


// A query.
message Query {
  // The projection to return. If not set the entire entity is returned.
  repeated PropertyExpression projection = 2;

  // The kinds to query (if empty, returns entities from all kinds).
  repeated KindExpression kind = 3;

  // The filter to apply (optional).
  optional Filter filter = 4;

  // The order to apply to the query results (if empty, order is unspecified).
  repeated PropertyOrder order = 5;

  // The properties to group by (if empty, no grouping is applied to the
  // result set).
  repeated PropertyReference group_by = 6;

  // A starting point for the query results. Optional. Query cursors are
  // returned in query result batches.
  optional bytes /* serialized QueryCursor */ start_cursor = 7;

  // An ending point for the query results. Optional. Query cursors are
  // returned in query result batches.
  optional bytes /* serialized QueryCursor */ end_cursor = 8;

  // The number of results to skip. Applies before limit, but after all other
  // constraints (optional, defaults to 0).
  optional int32 offset = 10 [default=0];

  // The maximum number of results to return. Applies after all other
  // constraints. Optional.
  optional int32 limit = 11;
}


// A representation of a kind.
message KindExpression {
  // The name of the kind.
  required string name = 1;
}


// A reference to a property relative to the kind expressions.
// exactly.
message PropertyReference {
  // The name of the property.
  required string name = 2;
}

// ABSENT: Projection

// The desired order for a specific property.
message PropertyOrder {
  enum Direction {
    ASCENDING = 1;
    DESCENDING = 2;
  }
  // The property to order by.
  required PropertyReference property = 1;
  // The direction to order by.
  optional Direction direction = 2 [default=ASCENDING];
}


// A holder for any type of filter. Exactly one field should be specified.
message Filter {
  // A composite filter.
  optional CompositeFilter composite_filter = 1;
  // A filter on a property.
  optional PropertyFilter property_filter = 2;
}

// A filter that merges the multiple other filters using the given operation.
message CompositeFilter {
  enum Operator {
    AND = 1;
  }

  // The operator for combining multiple filters.
  required Operator operator = 1;
  // The list of filters to combine.
  // Must contain at least one filter.
  repeated Filter filter = 2;
}


// A filter on a specific property.
message PropertyFilter {
  enum Operator {
    LESS_THAN = 1;
    LESS_THAN_OR_EQUAL = 2;
    GREATER_THAN = 3;
    GREATER_THAN_OR_EQUAL = 4;
    EQUAL = 5;

    HAS_ANCESTOR = 11;
  }

  // The property to filter by.
  required PropertyReference property = 1;
  // The operator to filter by.
  required Operator operator = 2;
  // The value to compare the property to.
  required Value value = 3;
}


// A GQL query.
message GqlQuery {
  required string query_string = 1;
  // When false, the query string must not contain a literal.
  optional bool allow_literal = 2 [default = false];
  // A named argument must set field GqlQueryArg.name.
  // No two named arguments may have the same name.
  // For each non-reserved named binding site in the query string,
  // there must be a named argument with that name,
  // but not necessarily the inverse.
  repeated GqlQueryArg name_arg = 3;
  // Numbered binding site @1 references the first numbered argument,
  // effectively using 1-based indexing, rather than the usual 0.
  // A numbered argument must NOT set field GqlQueryArg.name.
  // For each binding site numbered i in query_string,
  // there must be an ith numbered argument.
  // The inverse must also be true.
  repeated GqlQueryArg number_arg = 4;
}


// A binding argument for a GQL query.
// Exactly one of fields value and cursor must be set.
message GqlQueryArg {
  // Must match regex "[A-Za-z_$][A-Za-z_$0-9]*".
  // Must not match regex "__.*__".
  // Must not be "".
  optional string name = 1;
  optional Value value = 2;
  optional bytes cursor = 3;
}


// A batch of results produced by a query.
message QueryResultBatch {
  // The possible values for the 'more_results' field.
  enum MoreResultsType {
    NOT_FINISHED = 1;  // There are additional batches to fetch from this query.
    MORE_RESULTS_AFTER_LIMIT = 2;  // The query is finished, but there are more
                                   // results after the limit.
    NO_MORE_RESULTS = 3;  // The query has been exhausted.
  }

  // The result type for every entity in entityResults.
  required EntityResult.ResultType entity_result_type = 1;
  // The results for this batch.
  repeated EntityResult entity_result = 2;

  // A cursor that points to the position after the last result in the batch.
  // May be absent.
  optional bytes /* serialized QueryCursor */ end_cursor = 4;

  // The state of the query after the current batch.
  required MoreResultsType more_results = 5;

  // The number of results skipped because of <code>Query.offset</code>.
  optional int32 skipped_results = 6;
}
